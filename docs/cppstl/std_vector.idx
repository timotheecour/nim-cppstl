CppVector	cppstl/std_vector.html#CppVector	std_vector: CppVector	
CppVectorIterator	cppstl/std_vector.html#CppVectorIterator	std_vector: CppVectorIterator	
CppVectorConstIterator	cppstl/std_vector.html#CppVectorConstIterator	std_vector: CppVectorConstIterator	
initCppVector	cppstl/std_vector.html#initCppVector	std_vector: initCppVector[T](): CppVector[T]	
initCppVector	cppstl/std_vector.html#initCppVector,csize_t	std_vector: initCppVector[T](n: csize_t): CppVector[T]	
initCppVector	cppstl/std_vector.html#initCppVector,csize_t,T	std_vector: initCppVector[T](n: csize_t; val: T): CppVector[T]	
initCppVector	cppstl/std_vector.html#initCppVector,CppVector[T]	std_vector: initCppVector[T](x: CppVector[T]): CppVector[T]	
initCppVector	cppstl/std_vector.html#initCppVector,CppVectorConstIterator[T],CppVectorConstIterator[T]	std_vector: initCppVector[T](first, last: CppVectorConstIterator[T]): CppVector[T]	
begin	cppstl/std_vector.html#begin,CppVector[T]	std_vector: begin[T](v: CppVector[T]): CppVectorIterator[T]	
`end`	cppstl/std_vector.html#end,CppVector[T]	std_vector: `end`[T](v: CppVector[T]): CppVectorIterator[T]	
cBegin	cppstl/std_vector.html#cBegin,CppVector[T]	std_vector: cBegin[T](v: CppVector[T]): CppVectorConstIterator[T]	
cEnd	cppstl/std_vector.html#cEnd,CppVector[T]	std_vector: cEnd[T](v: CppVector[T]): CppVectorConstIterator[T]	
rBegin	cppstl/std_vector.html#rBegin,CppVector[T]	std_vector: rBegin[T](x: CppVector[T]): CppVectorIterator[T]	
rEnd	cppstl/std_vector.html#rEnd,CppVector[T]	std_vector: rEnd[T](x: CppVector[T]): CppVectorIterator[T]	
crBegin	cppstl/std_vector.html#crBegin,CppVector[T]	std_vector: crBegin[T](x: CppVector[T]): CppVectorConstIterator[T]	
crEnd	cppstl/std_vector.html#crEnd,CppVector[T]	std_vector: crEnd[T](x: CppVector[T]): CppVectorConstIterator[T]	
size	cppstl/std_vector.html#size,CppVector	std_vector: size(v: CppVector): csize_t	
maxSize	cppstl/std_vector.html#maxSize,CppVector[T]	std_vector: maxSize[T](self: CppVector[T]): csize_t	
resize	cppstl/std_vector.html#resize,CppVector[T],csize_t	std_vector: resize[T](self: CppVector[T]; n: csize_t)	
capacity	cppstl/std_vector.html#capacity,CppVector[T]	std_vector: capacity[T](self: CppVector[T]): csize_t	
empty	cppstl/std_vector.html#empty,CppVector	std_vector: empty(v: CppVector): bool	
reserve	cppstl/std_vector.html#reserve,CppVector[T],csize_t	std_vector: reserve[T](self: var CppVector[T]; n: csize_t)	
shrinkToFit	cppstl/std_vector.html#shrinkToFit,CppVector[T]	std_vector: shrinkToFit[T](self: var CppVector[T])	
at	cppstl/std_vector.html#at,CppVector[T],csize_t	std_vector: at[T](self: var CppVector[T]; n: csize_t): var T	
at	cppstl/std_vector.html#at,CppVector[T],csize_t_2	std_vector: at[T](self: CppVector[T]; n: csize_t): T	
front	cppstl/std_vector.html#front,CppVector[T]	std_vector: front[T](v: var CppVector[T]): var T	
front	cppstl/std_vector.html#front,CppVector[T]_2	std_vector: front[T](v: CppVector[T]): T	
back	cppstl/std_vector.html#back,CppVector[T]	std_vector: back[T](v: var CppVector[T]): var T	
back	cppstl/std_vector.html#back,CppVector[T]_2	std_vector: back[T](v: CppVector[T]): T	
data	cppstl/std_vector.html#data,CppVector[T]	std_vector: data[T](self: CppVector[T]): ptr T	
assign	cppstl/std_vector.html#assign,CppVector[T],csize_t,T	std_vector: assign[T](v: var CppVector[T]; num: csize_t; val: T)	
assign	cppstl/std_vector.html#assign,csize_t,T	std_vector: assign[T](n: csize_t; val: T)	
assign	cppstl/std_vector.html#assign,CppVectorIterator[T],CppVectorIterator[T]	std_vector: assign[T](first: CppVectorIterator[T]; last: CppVectorIterator[T])	
pushBack	cppstl/std_vector.html#pushBack,CppVector[T],T	std_vector: pushBack[T](v: var CppVector[T]; elem: T)	
popBack	cppstl/std_vector.html#popBack,CppVector[T]	std_vector: popBack[T](v: var CppVector[T])	
insert	cppstl/std_vector.html#insert,CppVector[T],CppVectorConstIterator[T],T	std_vector: insert[T](v: var CppVector[T]; position: CppVectorConstIterator[T]; val: T): CppVectorIterator[\n    T]	
insert	cppstl/std_vector.html#insert,CppVector[T],CppVectorConstIterator[T],csize_t,T	std_vector: insert[T](v: var CppVector[T]; position: CppVectorConstIterator[T];\n          count: csize_t; val: T): CppVectorIterator[T]	
insert	cppstl/std_vector.html#insert,CppVector[T],CppVectorConstIterator[T],CppVectorConstIterator[T],CppVectorConstIterator[T]	std_vector: insert[T](v: var CppVector[T]; position, first, last: CppVectorConstIterator[T]): CppVectorIterator[\n    T]	
swap	cppstl/std_vector.html#swap,CppVector[T],CppVector[T]	std_vector: swap[T](v1, v2: var CppVector[T])	
erase	cppstl/std_vector.html#erase,CppVector[T],CppVectorConstIterator[T]	std_vector: erase[T](self: var CppVector[T]; position: CppVectorConstIterator[T]): CppVectorIterator[\n    T]	
erase	cppstl/std_vector.html#erase,CppVector[T],CppVectorConstIterator[T],CppVectorConstIterator[T]	std_vector: erase[T](self: var CppVector[T]; first, last: CppVectorConstIterator[T]): CppVectorIterator[\n    T]	
clear	cppstl/std_vector.html#clear,CppVector[T]	std_vector: clear[T](self: var CppVector[T])	
`==`	cppstl/std_vector.html#==,CppVector[T],CppVector[T]	std_vector: `==`[T](a: CppVector[T]; b: CppVector[T]): bool	
`!=`	cppstl/std_vector.html#!=,CppVector[T],CppVector[T]	std_vector: `!=`[T](a: CppVector[T]; b: CppVector[T]): bool	
`&lt;`	cppstl/std_vector.html#<,CppVector[T],CppVector[T]	std_vector: `&lt;`[T](a: CppVector[T]; b: CppVector[T]): bool	
`&lt;=`	cppstl/std_vector.html#<=,CppVector[T],CppVector[T]	std_vector: `&lt;=`[T](a: CppVector[T]; b: CppVector[T]): bool	
`&gt;`	cppstl/std_vector.html#>,CppVector[T],CppVector[T]	std_vector: `&gt;`[T](a: CppVector[T]; b: CppVector[T]): bool	
`&gt;=`	cppstl/std_vector.html#>=,CppVector[T],CppVector[T]	std_vector: `&gt;=`[T](a: CppVector[T]; b: CppVector[T]): bool	
`[]`	cppstl/std_vector.html#[],CppVector[T],Natural	std_vector: `[]`[T](self: CppVector[T]; idx: Natural): T	
`[]`	cppstl/std_vector.html#[],CppVector[T],Natural_2	std_vector: `[]`[T](self: var CppVector[T]; idx: Natural): var T	
`[]=`	cppstl/std_vector.html#[]=,CppVector[T],Natural,T	std_vector: `[]=`[T](self: var CppVector[T]; idx: Natural; val: T)	
CppVectorIteratorToCppVectorConstIterator	cppstl/std_vector.html#CppVectorIteratorToCppVectorConstIterator.c,CppVectorIterator[T]	std_vector: CppVectorIteratorToCppVectorConstIterator[T](x: CppVectorIterator[T]): CppVectorConstIterator[\n    T]	
`$`	cppstl/std_vector.html#$,CppVector[T]	std_vector: `$`[T](v: CppVector[T]): string	
`+`	cppstl/std_vector.html#+,T,int	std_vector: `+`[T: CppVectorIterator](it`gensym0: T; offset`gensym0: int): T	
`-`	cppstl/std_vector.html#-,T,int	std_vector: `-`[T: CppVectorIterator](it`gensym0: T; offset`gensym0: int): T	
`+`	cppstl/std_vector.html#+,T,int_2	std_vector: `+`[T: CppVectorConstIterator](it`gensym1: T; offset`gensym1: int): T	
`-`	cppstl/std_vector.html#-,T,int_2	std_vector: `-`[T: CppVectorConstIterator](it`gensym1: T; offset`gensym1: int): T	
len	cppstl/std_vector.html#len,CppVector	std_vector: len(v: CppVector): csize_t	
add	cppstl/std_vector.html#add,CppVector[T],T	std_vector: add[T](v: var CppVector[T]; elem: T)	
first	cppstl/std_vector.html#first,CppVector[T]	std_vector: first[T](v: var CppVector[T]): var T	
first	cppstl/std_vector.html#first,CppVector[T]_2	std_vector: first[T](v: CppVector[T]): T	
last	cppstl/std_vector.html#last,CppVector[T]	std_vector: last[T](v: var CppVector[T]): var T	
last	cppstl/std_vector.html#last,CppVector[T]_2	std_vector: last[T](v: CppVector[T]): T	
items	cppstl/std_vector.html#items.i,CppVector[T]	std_vector: items[T](v: CppVector[T]): T	
pairs	cppstl/std_vector.html#pairs.i,CppVector[T]	std_vector: pairs[T](v: CppVector[T]): (csize_t, T)	
toSeq	cppstl/std_vector.html#toSeq,CppVector[T]	std_vector: toSeq[T](v: CppVector[T]): seq[T]	
toCppVector	cppstl/std_vector.html#toCppVector,openArray[T]	std_vector: toCppVector[T](s: openArray[T]): CppVector[T]	
